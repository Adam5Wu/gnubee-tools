#!/bin/bash
# mkinitramfs - copyright Neil Brown <neilb@brown.name> 2018
#  SPDX-License-Identifier: GPL-2.0


# mkinitramfs creates an initramfs image from a Debian mips install
# to be used for booting a GNUBEE-PC.
# It adds scripts, various binaries and libraries, and provides a
# list of devices files.
# It is not intended to be used directly - use "gbmake initramfs"
#
usage() {
	echo >&2 "Usage: mkinitramfs target-directory file-for-device-list"
	exit 2
}

case $# in
	2 ) dir=$1 devlist=$2
		if [ ! -d "$dir" ]; then
			echo >&2 "$dir does not exist".
			usage
		fi
	;;
	* ) usage
esac

case `uname -m` in
	mips ) remote=eval ;;
	* ) if [ -z "$GNUBEE_SSH_HOST" ]; then
		echo Please run on a gnubee, or provide GNUBEE_SSH_HOST
		exit 1
	    fi
	    remote="ssh -x $GNUBEE_SSH_HOST"
	    case `$remote uname -m` in
		mips ) : success ;;
		* ) echo >&2 $GNUBEE_SSH_HOST no accessible or not mips; exit 1
	    esac
esac


prog=$0
if [ -L "$prog" ]; then prog=`readlink $prog`; fi
gbtools=`realpath $(dirname $prog)/..`

if [ ! -d "$gbtools/scripts" ]; then
	echo >&2 Cannot find scripts in $gbtools
	exit 1
fi

cat > $devlist <<- END
	dir /dev 755 0 0
	nod /dev/console 600 0 0 c 5 1
	nod /dev/null 666 0 0 c 1 3
	nod /dev/zero 666 0 0 c 1 5
	nod /dev/tty 666 0 0 c 5 0
	nod /dev/tty0 660 0 0 c 4 0
	nod /dev/tty1 660 0 0 c 4 1
	nod /dev/random 666 0 0 c 1 8
	nod /dev/urandom 666 0 0 c 1 9
	nod /dev/kmsg 666 0 0 c 1 11
	dir /dev/pts 755 0 0
	dir /proc 755 0 0
	dir /sys 755 0 0
	dir /tmp 777 0 0
	dir /mnt 755 0 0
	dir /mnt/root 755 0 0
END

builddir=`realpath "$GNUBEE_BUILD_DIR"`
cd $dir

case `realpath .` in
	/*/*/* ) : ok ;;
	* ) echo >&@ Refusing to create initramfs at such a high-level directory: `realpath .`
		exit 2;
esac

rm -rf *
mkdir -p bin lib/modules run/mdadm etc usr
ln -s bin sbin
ln -s ../bin usr/sbin
ln -s ../bin usr/bin
ln -s ../lib usr/lib
ln -s /proc/mounts etc/mtab

libs=
# install essential binaries
for b in busybox findfs; do
    path=`$remote PATH=/sbin:/usr/sbin:$PATH which $b 2> /dev/null`
    if [ -z "$path" ]; then
	echo "Please install $b"
	exit 1;
    fi
    echo "## Install $path"
    b=`basename $path`
    $remote cat "$path" > bin/$b ; chmod 755 bin/$b
    libs="$libs `$remote ldd "$path" |sed -n -e 's,^.*[ 	]\(/[^ ]*\) (.*$,\1,p'`"
done

debootstrap_bins=""
echo "## copying debootstrap (if present)"
$remote '(cd /; tar 2> /dev/null cf - usr/sbin/debootstrap usr/share/debootstrap usr/share/keyrings/debian-archive-keyring.gpg )' | tar xf -
if [ -f bin/debootstrap ]; then
     # let's install everything else needed to bootstrap a debian install
    debootstrap_bins="blkid mkfs.ext4 tune2fs wget gpgv"
    libs="$libs /lib/mipsel-linux-gnu/libresolv.so.2"
    libs="$libs /lib/mipsel-linux-gnu/libnss_dns.so.2"

    # Need to build pkgdetails
    echo "## building pkgdetails"
    T=/tmp/.gb-built-$$
    (cd $gbtools/pkgdetails; tar cf - . ) |
	$remote "rm -rf $T ; mkdir -p $T; cd $T; tar xf -; cc -Wno-implicit-function-declaration -o pkgdetails pkgdetails.c"
    $remote cat $T/pkgdetails > usr/share/debootstrap/pkgdetails
    chmod 755 usr/share/debootstrap/pkgdetails
else
    echo "!! debootstrap not installed"
fi
# now optional binaries
for b in cryptsetup mdadm dropbear dbclient fsck.ext4 xfs_repair lvm evtest ntpdate passwd $debootstrap_bins ; do
    path=`$remote PATH=/sbin:/usr/sbin:$PATH which $b 2> /dev/null`
    if [ -z "$path" ]; then
	echo $"$b not found, not installing"
    else
	echo "## Install $path"
	b=`basename $path`
	$remote cat "$path" > bin/$b ; chmod 755 bin/$b
	libs="$libs `$remote ldd "$path" |sed -n -e 's,^.*[ 	]\(/[^ ]*\) (.*$,\1,p'`"
    fi
done

if [ -f bin/dropbear ]; then
    # dropbear needs some extra configuration
    echo '## configuring dropbear'
    mkdir etc/dropbear
    if [ ! -f $builddir/dropbear/dropbear_ecdsa_host_key ]; then
	mkdir -p $builddir/dropbear
	$remote "dropbearkey -t ecdsa -f /tmp/drop$$.key >&2;
		 cat /tmp/drop$$.key" >  $builddir/dropbear/dropbear_ecdsa_host_key
    fi
    cp $builddir/dropbear/* etc/dropbear
    echo passwd: files >> etc/nsswitch.conf
    echo group: files >> etc/nsswitch.conf
    echo > etc/passwd root:x:0:0:root:/:/bin/sh
    echo > etc/group  root:x:0:
    echo 'PATH=.:/bin; export PATH' > etc/profile
    # root password is GnuBee
    echo > etc/shadow 'root:$6$l80E2NNrh32z0N$HX1nhaV6TcdM3OcMm8PVyzQZAl6c9Q2GYugdS9MuDcG6NkxW3eLCvLbw05tMKkbyRlieU1QeZ4tngZpaS9Fnf0::0:99999:7:::'
    libs="$libs /lib/mipsel-linux-gnu/libnss_files.so.2"
    if [ -f bin/passwd ]; then
	# need pam modules too
	echo 'passwd password required pam_unix.so sha512' > etc/pam.conf
	mkdir -p lib/mipsel-linux-gnu/security
	path=lib/mipsel-linux-gnu/security/pam_unix.so
	$remote cat /$path > $path
	libs="$libs `$remote ldd "/$path" |sed -n -e 's,^.*[ 	]\(/[^ ]*\) (.*$,\1,p'`"
    fi
fi


# ntpdate need to find the ntp service
echo ntp 123/tcp >> etc/services
echo ntp 123/udp >> etc/services

# Now we might need to build swconfig.
if [ -f $builddir/include/linux/switch.h ]; then
   echo '## building swconfig'
   T=/tmp/.gb-built-$$
   (cd $builddir ; tar cf - include ) | $remote "rm -rf $T; mkdir -p $T; cd $T; tar xf -"
   (cd $gbtools/swconfig; tar cf - .) | $remote "cd $T; tar xf - ; make swconfig"
   $remote cat $T/swconfig > bin/swconfig ; chmod 755 bin/swconfig
   libs="$libs `$remote ldd "$T/swconfig" |sed -n -e 's,^.*[ 	]\(/[^ ]*\) (.*$,\1,p'`"
   $remote rm -rf $T
fi

# Now make sure we have all the libraries we need.
for lib in $libs; do
	if [ ! -f .$lib ]; then
		echo '## Adding' $lib
		mkdir -p `dirname .$lib`
		$remote cat $lib > .$lib ; chmod +x .$lib
	fi
done

# add busybox links
$remote busybox --list |
  while read a;
  do
     [ -e bin/$a ] || ln -s busybox bin/$a
  done

# copy in some scripts
for i in $gbtools/initramfs/*
do
	echo "## Install script `basename $i`"
	cp -r $i .
done
